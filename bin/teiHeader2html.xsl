<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
		xmlns:tei="http://www.tei-c.org/ns/1.0"
		xmlns:xd="http://www.oxygenxml.com/ns/doc/xsl"
		xmlns="http://www.w3.org/1999/xhtml"
		exclude-result-prefixes="tei xd">
  <xsl:import href="Stylesheets/profiles/default/html/to.xsl"/>
  <xd:doc>
    <xd:desc>
      <xd:p>Convert TEI header to HTML.</xd:p>
      <xd:p>Author: Tomaž Erjavec tomaz.erjavec@ijs.si</xd:p>
      <xd:p>Date: 2018-11-06</xd:p>
      <xd:p>This stylesheet relies on standard TEI stylesheets</xd:p>
    </xd:desc>
  </xd:doc>
  
  <xd:doc><xd:desc>
    <xd:p>TEI file with localisations</xd:p>
  </xd:desc></xd:doc>
  <xsl:param name="localisation-file">http://nl.ijs.si/tei/locale/teiLocalise-sl.xml</xsl:param>
  <xsl:param name="outputDir">html</xsl:param>
  <!--xsl:param name="cssFile">http://nl.ijs.si/css/teiHeader2html.css</xsl:param-->

  <xsl:param name="docID">MULTEXT-East</xsl:param>
  <xsl:param name="author">Tomaž Erjavec</xsl:param>
  <xsl:param name="feedbackURL">mailto:tomaz.erjavec@ijs.si</xsl:param>
  <!--xsl:param name="department">nl.ijs.si</xsl:param-->
  <xsl:param name="homeURL">http://nl.ijs.si/</xsl:param>
  <xsl:param name="parentWords">nl.ijs.si</xsl:param>
  <xsl:param name="parentURL">http://nl.ijs.si/</xsl:param>

  <xsl:param name="institution">
    <xsl:value-of select="$docID"/>
  </xsl:param>
  <xsl:param name="homeLabel">
    <xsl:value-of select="$docID"/>
  </xsl:param>
  <xsl:param name="homeWords">
    <xsl:value-of select="$docID"/>
  </xsl:param>
  <xsl:param name="searchURL">https://www.google.com/search?as_sitesearch=nl.ijs.si</xsl:param>
  <xsl:template name="copyrightStatement">This work is licenced under the <a href="http://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution 4.0 licence</a>.</xsl:template>

  <xsl:param name="verbose"/>
  <xd:doc><xd:desc>
    <xd:p>If set, show also tags</xd:p>
  </xd:desc></xd:doc>
  <xsl:param name="debug"/>
  <xd:doc><xd:desc>
    <xd:p>Localisation language</xd:p>
  </xd:desc></xd:doc>
  <xsl:param name="language">sl</xsl:param>
  <xsl:param name="documentationLanguage" select="$language"/>

  <xd:doc><xd:desc>
    <xd:p>URL with TEI element documentation</xd:p>
  </xd:desc></xd:doc>
  <xsl:param name="tei-url">http://www.tei-c.org/release/doc/tei-p5-doc/en/html/</xsl:param>
  <xd:doc><xd:desc>
    <xd:p>Title of HTML page</xd:p>
  </xd:desc></xd:doc>

  <xd:doc><xd:desc>
    <xd:p>URL for access of NUK holdings via COBISS/IZUM, needs COBISS ID for valid URL</xd:p>
  </xd:desc></xd:doc>
  <xsl:param name="COBISS-URL">
    <xsl:text>http://cobiss.izum.si/scripts/cobiss?command=DISPLAY&amp;base=50001&amp;rid=</xsl:text>
  </xsl:param>

  <xsl:output method="xhtml" encoding="utf-8" indent="yes"/>
  <xsl:key name="id" match="tei:*" use="@xml:id"/>
  <xsl:key name="corresp" match="tei:*" use="@corresp"/>

  <xsl:template match="/">
    <xsl:variable name="teiHeader-sl" select="concat($docID,'-header-sl.html')"/>
    <xsl:variable name="teiHeader-en" select="concat($docID,'-header-en.html')"/>
    <xsl:call-template name="makeTEIHeader">
      <xsl:with-param name="file" select="concat($outputDir,'/',$teiHeader-sl)"/>
      <xsl:with-param name="language">sl</xsl:with-param>
    </xsl:call-template>
    <xsl:call-template name="makeTEIHeader">
      <xsl:with-param name="file" select="concat($outputDir,'/',$teiHeader-en)"/>
      <xsl:with-param name="language">en</xsl:with-param>
    </xsl:call-template>
  </xsl:template>

  <xd:doc><xd:desc>
    <xd:p>Output file with TEI header</xd:p>
  </xd:desc></xd:doc>
  <xsl:template name="makeTEIHeader">
    <xsl:param name="file"/>
    <xsl:param name="language" select="$documentationLanguage"/>
    <xsl:result-document doctype-public="{$doctypePublic}" doctype-system="{$doctypeSystem}" encoding="{$outputEncoding}" href="{$file}"
      method="{$outputMethod}">
      <xsl:call-template name="teiHeader-pageLayoutSimple">
        <xsl:with-param name="language" select="$language"/>
      </xsl:call-template>
    </xsl:result-document>
  </xsl:template>

  <xd:doc><xd:desc>
    <xd:p>Output HTML of TEI header</xd:p>
  </xd:desc></xd:doc>
  <xsl:template name="teiHeader-pageLayoutSimple">
    <xsl:param name="language" select="$documentationLanguage"/>
    <html>
      <xsl:call-template name="addLangAtt"/>
      <xsl:variable name="pagetitle">
	<xsl:sequence select="tei:generateTitle(.)"/>
      </xsl:variable>
      <xsl:sequence select="tei:htmlHead($pagetitle,5)"/>
      <body class="simple" id="TOP">
        <xsl:call-template name="bodyMicroData"/>
        <xsl:call-template name="bodyJavascriptHook"/>
	<xsl:call-template name="bodyHook"/>
        <div class="stdheader autogenerated">
          <xsl:call-template name="stdheader">
	    <xsl:with-param name="title">
	      <xsl:sequence select="tei:generateTitle(.)"/>
	    </xsl:with-param>
          </xsl:call-template>
        </div>
        <xsl:call-template name="startHook"/>
        <xsl:apply-templates mode="teiHeader" select="//tei:teiHeader">
          <xsl:with-param name="language" select="$language"/>
        </xsl:apply-templates>
        <xsl:call-template name="stdfooter"/>
        <xsl:call-template name="bodyEndHook"/>
      </body>
    </html>
  </xsl:template>

  <xd:doc><xd:desc>
    <xd:p>Rendered TEI header</xd:p>
  </xd:desc></xd:doc>
  <xsl:template mode="teiHeader" match="tei:teiHeader">
    <xsl:param name="language" select="$documentationLanguage"/>
    <h1>
      <xsl:call-template name="gi-gloss">
        <xsl:with-param name="language" select="$language"/>
      </xsl:call-template>
    </h1>
    <table border="border">
      <xsl:apply-templates mode="teiHeader">
        <xsl:with-param name="language" select="$language"/>
      </xsl:apply-templates>
    </table>
  </xsl:template>
  <xd:doc><xd:desc>
    <xd:p>Output one element, if in appropriate language.</xd:p>
  </xd:desc></xd:doc>
  <xsl:template mode="teiHeader" match="tei:*" priority="-1.0">
    <xsl:param name="language" select="$documentationLanguage"/>
    <xsl:if test="not(@xml:lang) or @xml:lang=$language or @xml:lang='lat' or @xml:lang='ger' or @xml:lang='la' or @xml:lang='de'">
      <xsl:call-template name="element">
        <xsl:with-param name="language" select="$language"/>
      </xsl:call-template>
    </xsl:if>
  </xsl:template>
  <xd:doc><xd:desc>
    <xd:p>Rendered COBISS</xd:p>
  </xd:desc></xd:doc>
  <xsl:template mode="teiHeader" match="tei:note[@type='COBISS_ID']/text()">
    <xsl:param name="language" select="$documentationLanguage"/>
    <a>
      <xsl:attribute name="href">
        <xsl:value-of select="concat($COBISS-URL,.)"/>
      </xsl:attribute>
      <xsl:value-of select="."/>
    </a>
  </xsl:template>
  <xd:doc><xd:desc>
    <xd:p>Rendered address line</xd:p>
  </xd:desc></xd:doc>
  <xsl:template mode="teiHeader" match="tei:addrLine">
    <xsl:param name="language" select="$documentationLanguage"/>
    <xsl:if test="not(@xml:lang) or @xml:lang=$language">
      <xsl:apply-templates mode="teiHeader">
        <xsl:with-param name="language" select="$language"/>
      </xsl:apply-templates>
      <br/>
    </xsl:if>
  </xsl:template>
  <xd:doc><xd:desc>
    <xd:p>Rendered line break</xd:p>
  </xd:desc></xd:doc>
  <xsl:template mode="teiHeader" match="tei:lb">
    <br/>
  </xsl:template>
  <xd:doc><xd:desc>
    <xd:p>Rendered paragraph</xd:p>
  </xd:desc></xd:doc>
  <xsl:template mode="teiHeader" match="tei:p">
    <xsl:param name="language" select="$documentationLanguage"/>
    <xsl:if test="not(@xml:lang) or @xml:lang=$language or @xml:lang='lat' or @xml:lang='ger' or @xml:lang='la' or @xml:lang='de'">
      <p>
        <xsl:apply-templates/>
      </p>
    </xsl:if>
  </xsl:template>
  <xd:doc><xd:desc>
    <xd:p>Rendered list</xd:p>
  </xd:desc></xd:doc>
  <xsl:template mode="teiHeader" match="tei:list">
    <xsl:param name="language" select="$documentationLanguage"/>
    <xsl:if test="not(@xml:lang) or @xml:lang=$language or @xml:lang='lat' or @xml:lang='ger' or @xml:lang='la' or @xml:lang='de'">
      <ul>
        <xsl:apply-templates mode="teiHeader">
          <xsl:with-param name="language" select="$language"/>
        </xsl:apply-templates>
      </ul>
    </xsl:if>
  </xsl:template>
  <xd:doc><xd:desc>
    <xd:p>Rendered list item</xd:p>
  </xd:desc></xd:doc>
  <xsl:template mode="teiHeader" match="tei:teiHeader//tei:item">
    <xsl:param name="language" select="$documentationLanguage"/>
    <xsl:if test="not(@xml:lang) or @xml:lang=$language or @xml:lang='lat' or @xml:lang='ger' or @xml:lang='la' or @xml:lang='de'">
      <li>
        <xsl:choose>
          <xsl:when test="normalize-space(./text())">
            <xsl:apply-templates/>
          </xsl:when>
          <xsl:otherwise>
            <table border="1">
              <xsl:apply-templates mode="teiHeader">
                <xsl:with-param name="language" select="$language"/>
              </xsl:apply-templates>
            </table>
          </xsl:otherwise>
        </xsl:choose>
      </li>
    </xsl:if>
  </xsl:template>
  <xd:doc><xd:desc>
    <xd:p>Rendered highlitghted text</xd:p>
  </xd:desc></xd:doc>
  <xsl:template mode="teiHeader" match="tei:hi">
    <xsl:param name="language"/>
    <em>
      <xsl:apply-templates/>
    </em>
  </xsl:template>
  <xd:doc><xd:desc>
    <xd:p>Rendered quoted text</xd:p>
  </xd:desc></xd:doc>
  <xsl:template mode="teiHeader" match="tei:q">
    <xsl:param name="language"/>
    <xsl:text>&#x201C;</xsl:text>
    <xsl:apply-templates/>
    <xsl:text>&#x201D;</xsl:text>
  </xsl:template>
  <xsl:template mode="teiHeader" match="tei:ref">
    <xsl:param name="language"/>
    <a href="{@target}">
      <xsl:apply-templates/>
    </a>
  </xsl:template>
  
  <!-- Named templates -->
  <xd:doc><xd:desc>
    <xd:p>Put mark with explicit name, to be able to refer to it in HTML.</xd:p>
  </xd:desc></xd:doc>
  <xsl:template name="id-mark">
    <xsl:if test="not(ancestor::tei:*[6])">
      <xsl:variable name="lid">
        <xsl:variable name="gi" select="name()"/>
        <xsl:choose>
          <xsl:when test="@xml:id">
            <xsl:value-of select="@xml:id"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:text>loc.</xsl:text>
            <xsl:number count="tei:*" level="multiple"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <a href="#{$lid}" id="{$lid}" title="ID = {$lid}">
        <sup>
          <xsl:text>&#xa7;</xsl:text>
        </sup>
      </a>
    </xsl:if>
  </xsl:template>

  <xd:doc><xd:desc>
    <xd:p>Output element either in-line if mixed content, or as a HTML table row</xd:p>
  </xd:desc></xd:doc>
  <xsl:template name="element">
    <xsl:param name="language" select="$documentationLanguage"/>
    <xsl:choose>
      <xsl:when test="normalize-space(preceding-sibling::text()[1]) or 
        normalize-space(following-sibling::text()[1])">
        <xsl:apply-templates mode="teiHeader">
          <xsl:with-param name="language" select="$language"/>
        </xsl:apply-templates>
        <sub>
          <xsl:call-template name="start-tag">
            <xsl:with-param name="language" select="$language"/>
          </xsl:call-template>
        </sub>
      </xsl:when>
      <xsl:otherwise>
        <tr>
          <td valign="top">
            <xsl:if test="$debug">
              <xsl:call-template name="tag"/>
              <br/>
            </xsl:if>
            <xsl:call-template name="id-mark"/>
            <b>
              <xsl:call-template name="gi-gloss">
                <xsl:with-param name="language" select="$language"/>
              </xsl:call-template>
            </b>
            <xsl:if test="@*">
              <br/>
              <xsl:for-each select="@*">
                <xsl:call-template name="att-gloss">
                  <xsl:with-param name="language" select="$language"/>
                </xsl:call-template>
                <xsl:text> </xsl:text>
              </xsl:for-each>
            </xsl:if>
          </td>
          <td>
            <xsl:choose>
              <xsl:when test="name() = 'tagUsage'">
                <xsl:call-template name="gi-gloss">
                  <xsl:with-param name="gi" select="@gi"/>
                  <xsl:with-param name="language" select="$language"/>
                </xsl:call-template>
		<xsl:if test="tei:*">
		  <table border="1">
		    <xsl:apply-templates mode="teiHeader" select="tei:*">
		      <xsl:with-param name="language" select="$language"/>
		    </xsl:apply-templates>
		  </table>
		</xsl:if>
              </xsl:when>
              <xsl:when test="name() = 'fs'">
                <xsl:call-template name="fs-feats">
                  <xsl:with-param name="refs" select="@feats"/>
                  <xsl:with-param name="language" select="$language"/>
                </xsl:call-template>
              </xsl:when>
              <xsl:when
                test="tei:p or tei:list or
                normalize-space(./text()[1]) or 
                normalize-space(tei:ref[1]/text())">
                <xsl:apply-templates mode="teiHeader">
                  <xsl:with-param name="language" select="$language"/>
                </xsl:apply-templates>
              </xsl:when>
              <xsl:otherwise>
                <table border="1">
                  <xsl:apply-templates mode="teiHeader">
                    <xsl:with-param name="language" select="$language"/>
                  </xsl:apply-templates>
                </table>
              </xsl:otherwise>
            </xsl:choose>
          </td>
        </tr>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>
  
  <xd:doc><xd:desc>
    <xd:p>Output start tag more or less as is.</xd:p>
  </xd:desc></xd:doc>
  <xsl:template name="tag">
    <xsl:param name="gi" select="name()"/>
    <small>
      <xsl:text>&lt;</xsl:text>
      <xsl:value-of select="$gi"/>
      <xsl:for-each select="@*">
        <xsl:text> </xsl:text>
        <xsl:value-of select="name()"/>
        <xsl:text>=</xsl:text>
        <xsl:value-of select="."/>
      </xsl:for-each>
      <xsl:text>&gt;</xsl:text>
      <sub>
        <xsl:number level="any" from="TEI"/>
      </sub>
    </small>
  </xsl:template>
  <xd:doc><xd:desc>
    <xd:p>Output translated start tag.</xd:p>
  </xd:desc></xd:doc>
  <xsl:template name="start-tag">
    <xsl:param name="language" select="$documentationLanguage"/>
    <b>
      <xsl:text>&lt;</xsl:text>
      <xsl:call-template name="gi-gloss">
        <xsl:with-param name="language" select="$language"/>
      </xsl:call-template>
      <xsl:if test="$debug">
        <xsl:text> </xsl:text>
        <xsl:call-template name="tag"/>
      </xsl:if>
      <xsl:text>&gt;</xsl:text>
    </b>
  </xsl:template>
  <xd:doc><xd:desc>
    <xd:p>Output translated end tag.</xd:p>
  </xd:desc></xd:doc>
  <xsl:template name="end-tag">
    <xsl:param name="language" select="$documentationLanguage"/>
    <b>
      <xsl:text>&lt;/</xsl:text>
      <xsl:call-template name="gi-gloss">
        <xsl:with-param name="language" select="$language"/>
      </xsl:call-template>
      <xsl:text>&gt;</xsl:text>
    </b>
  </xsl:template>
  <xd:doc><xd:desc>
    <xd:p>Output localised attribute gloss</xd:p>
  </xd:desc></xd:doc>
  <xsl:template name="att-gloss">
    <xsl:param name="att" select="name()"/>
    <xsl:param name="val" select="normalize-space(.)"/>
    <xsl:param name="language" select="$documentationLanguage"/>
    <xsl:variable name="att_loc" select="doc($localisation-file)//tei:attDef[@ident=$att]"/>
    <xsl:variable name="val_loc" select="$att_loc/tei:valList/tei:valItem[@ident=$val]"/>
    <xsl:if test="normalize-space($att_loc) and not($att='xml:lang' and $val=$language) and $att!='feats'">
      <b>
        <xsl:call-template name="glosstext">
          <xsl:with-param name="ident" select="$att"/>
          <xsl:with-param name="text" select="$att_loc"/>
          <xsl:with-param name="language" select="$language"/>
        </xsl:call-template>
      </b>
      <xsl:text> = </xsl:text>
      <xsl:choose>
        <xsl:when test="$att = 'id' or $att = 'xml:id'">
          <a name="{$val}">
            <xsl:value-of select="$val"/>
          </a>
        </xsl:when>
        <xsl:when test="$att='xml:lang' or $att='mainLang'">
          <xsl:value-of select="//tei:teiHeader//tei:langUsage/tei:language[@ident=$val]/tei:term[@xml:lang=$language]"/>
        </xsl:when>
        <xsl:when test="$att='corresp' or $att='feats' or $att='who'">
          <xsl:call-template name="idrefs">
            <xsl:with-param name="refs" select="$val"/>
          </xsl:call-template>
        </xsl:when>
        <xsl:when test="normalize-space($val_loc)">
          <i>
            <xsl:call-template name="glosstext">
              <xsl:with-param name="ident" select="$val"/>
              <xsl:with-param name="text" select="$val_loc"/>
              <xsl:with-param name="language" select="$language"/>
            </xsl:call-template>
          </i>
        </xsl:when>
        <xsl:otherwise>
          <i>
            <xsl:value-of select="$val"/>
            <xsl:if test="$debug and translate($val,'0123456789-.,','')">
              <font color="red">!</font>
            </xsl:if>
          </i>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:if>
  </xsl:template>

  <xd:doc><xd:desc>
    <xd:p>Output localised element gloss.</xd:p>
  </xd:desc></xd:doc>
  <xsl:template name="gi-gloss">
    <xsl:param name="language" select="$documentationLanguage"/>
    <xsl:param name="gi" select="name()"/>
    <xsl:variable name="url">
      <xsl:value-of select="$tei-url"/>
      <xsl:text>ref-</xsl:text>
      <xsl:value-of select="$gi"/>
      <xsl:text>.html</xsl:text>
    </xsl:variable>
    <xsl:variable name="text" select="doc($localisation-file)//tei:elementSpec[@ident=$gi]"/>
    <a href="{$url}" title="{$gi}">
      <xsl:call-template name="glosstext">
        <xsl:with-param name="ident" select="$gi"/>
        <xsl:with-param name="text" select="$text"/>
        <xsl:with-param name="language" select="$language"/>
      </xsl:call-template>
    </a>
  </xsl:template>
  <xd:doc><xd:desc>
    <xd:p>Output gloss text from localisation file.</xd:p>
  </xd:desc></xd:doc>
  <xsl:template name="glosstext">
    <xsl:param name="language" select="$documentationLanguage"/>
    <xsl:param name="ident"/>
    <xsl:param name="text"/>
    <xsl:choose>
      <xsl:when test="$text/tei:gloss[@xml:lang=$language]">
        <xsl:value-of select="$text/tei:gloss[@xml:lang=$language]"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="$ident"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>
  <xd:doc><xd:desc>
    <xd:p>Resolve ID references.</xd:p>
  </xd:desc></xd:doc>
  <xsl:template name="idrefs">
    <xsl:param name="refs"/>
    <xsl:choose>
      <xsl:when test="contains($refs,' ')">
        <xsl:call-template name="idref">
          <xsl:with-param name="ref" select="substring-before($refs,' ')"/>
        </xsl:call-template>
        <xsl:text>, </xsl:text>
        <xsl:call-template name="idrefs">
          <xsl:with-param name="refs" select="substring-after($refs,' ')"/>
        </xsl:call-template>
      </xsl:when>
      <xsl:otherwise>
        <xsl:call-template name="idref">
          <xsl:with-param name="ref" select="$refs"/>
        </xsl:call-template>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>
  <xsl:template name="idref">
    <xsl:param name="ref"/>
    <xsl:if test="normalize-space($ref)">
      <a href="{$ref}">
        <xsl:choose>
          <xsl:when test="starts-with($ref,'#')">
            <xsl:value-of select="substring-after($ref,'#')"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:value-of select="$ref"/>
          </xsl:otherwise>
        </xsl:choose>
      </a>
    </xsl:if>
  </xsl:template>
  <xd:doc><xd:desc>
    <xd:p>Output feature structures.</xd:p>
  </xd:desc></xd:doc>
  <xsl:template name="fs-feats">
    <xsl:param name="refs" select="@feats"/>
    <xsl:param name="language" select="$documentationLanguage"/>
    <xsl:choose>
      <xsl:when test="contains($refs,' ')">
        <xsl:call-template name="fs-feat">
          <xsl:with-param name="ref" select="substring-before($refs,' ')"/>
          <xsl:with-param name="language" select="$language"/>
        </xsl:call-template>
        <xsl:text>, </xsl:text>
        <xsl:call-template name="fs-feats">
          <xsl:with-param name="refs" select="substring-after($refs,' ')"/>
          <xsl:with-param name="language" select="$language"/>
        </xsl:call-template>
      </xsl:when>
      <xsl:otherwise>
        <xsl:call-template name="fs-feat">
          <xsl:with-param name="ref" select="$refs"/>
          <xsl:with-param name="language" select="$language"/>
        </xsl:call-template>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>
  <xsl:template name="fs-feat">
    <xsl:param name="ref"/>
    <xsl:param name="language" select="$documentationLanguage"/>
    <xsl:if test="normalize-space($ref)">
      <xsl:value-of select="key('id',substring-after($ref,'#'))[not(@xml:lang) or @xml:lang=$language]/@name"/>
      <xsl:text> = </xsl:text>
      <xsl:value-of select="key('id',substring-after($ref,'#'))[not(@xml:lang) or @xml:lang=$language]/tei:symbol/@value"/>
    </xsl:if>
  </xsl:template>
</xsl:stylesheet>
